using System;

//Generated by https://github.com/blat-blatnik/BeefWin32 and cherry picked. Not all APIs were copied over since Nanoforge only needs a small part of the massive windows API

namespace Win32
{
#region Structs
    [CRepr]
    public struct IUnknown
    {
    	public const new Guid IID = .(0x00000000, 0x0000, 0x0000, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46);
    	
    	protected VTable* vt;
    	public new VTable* VT { get => (.)vt; }
    	
    	public HRESULT QueryInterface(in Guid riid, void** ppvObject) mut => VT.QueryInterface(ref this, riid, ppvObject);
    	public uint32 AddRef() mut => VT.AddRef(ref this);
    	public uint32 Release() mut => VT.Release(ref this);

    	[CRepr]
    	public struct VTable
    	{
    		public new function [CallingConvention(.Stdcall)] HRESULT(ref IUnknown self, in Guid riid, void** ppvObject) QueryInterface;
    		public new function [CallingConvention(.Stdcall)] uint32(ref IUnknown self) AddRef;
    		public new function [CallingConvention(.Stdcall)] uint32(ref IUnknown self) Release;
    	}
    }
#endregion

	extension Win32
	{

	}
}

static
{
    public static mixin ReleaseCOM(Win32.IUnknown* x)
    {
        if (x != null)
        {
			x.Release();
		}
    }
}